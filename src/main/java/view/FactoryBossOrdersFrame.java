/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.operations.ObjectFinder;
import controller.operations.userOperations.FactoryBossOperations;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import model.Request;
import model.RequestStatus;
import model.factories.AbstractWoodFactory;
import model.factories.WoodenBookshelfFactory;
import model.factories.WoodenTableFactory;
import model.users.Customer;
import model.users.FactoryBoss;

/**
 *
 * @author Ege
 */
public class FactoryBossOrdersFrame extends javax.swing.JFrame {
    FactoryBoss factoryBoss;

    /**
     * Creates new form FactoryBossOrdersFrame
     */
    public FactoryBossOrdersFrame(FactoryBoss factoryBoss) {
        this.factoryBoss=factoryBoss;
        initComponents();
        messageOrders.setText("");
        fillMoneyAndWoodStock();
        fillOrdersTable();
    }
    
    private void fillMoneyAndWoodStock(){
        AbstractWoodFactory responsibleFactory=ObjectFinder.findFactoryFromFactoryId(factoryBoss.getResponsibleFactoryId());
        moneyLabel.setText(String.valueOf((int)responsibleFactory.getMoney()+"$"));
        woodStockLabel.setText(String.valueOf((int)responsibleFactory.getWoodStock()));
        
    }
    private void fillOrdersTable(){
        DefaultTableModel model=(DefaultTableModel) ordersTable.getModel();
        if(factoryBoss.getRequests().size()==0){
            String message="There is no notification...";
            Object[] notification={message};
            model.addRow(notification); 
        }else{
            for(int i=0;i<factoryBoss.getRequests().size();i++){
                Customer customer=ObjectFinder.findCustomerFromCustomerId(factoryBoss.getRequests().get(i).getUserId());
                Object[] order={factoryBoss.getRequests().get(i).getRequestId(),customer.getUserName(),
                    (int)factoryBoss.getRequests().get(i).getAmount(),factoryBoss.getRequests().get(i).getStatus()};
                model.addRow(order);
            }
        }
    }
    private void removeRows(){
        DefaultTableModel model=(DefaultTableModel) ordersTable.getModel();
        int row=0;
        while(model.getRowCount()>0){
            model.removeRow(row);
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        approveOrderButton = new javax.swing.JButton();
        denyOrderButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        moneyLabel = new javax.swing.JLabel();
        woodStockLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        messageOrders = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Order Owner", "Order Amount", "Order Status"
            }
        ));
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        approveOrderButton.setBackground(new java.awt.Color(0, 230, 64));
        approveOrderButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        approveOrderButton.setIcon(new javax.swing.ImageIcon("checkmark-32.png")); // NOI18N
        approveOrderButton.setText("Approve");
        approveOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderButtonActionPerformed(evt);
            }
        });

        denyOrderButton.setBackground(new java.awt.Color(240, 52, 52));
        denyOrderButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        denyOrderButton.setIcon(new javax.swing.ImageIcon("cancel-32.png")); // NOI18N
        denyOrderButton.setText("Deny");
        denyOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyOrderButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 120, 75));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Money");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Wood Stock");

        moneyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        moneyLabel.setText("1000$");

        woodStockLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        woodStockLabel.setText("10000");

        backButton.setIcon(new javax.swing.ImageIcon("arrow-112-48.png")); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moneyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(woodStockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addGap(88, 88, 88))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(woodStockLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(moneyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        messageOrders.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(approveOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153)
                        .addComponent(denyOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(messageOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(97, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approveOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(denyOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(messageOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        FactoryBossFrame factoryBossFrame=new FactoryBossFrame(factoryBoss);
        factoryBossFrame.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void approveOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderButtonActionPerformed
        AbstractWoodFactory responsibleFactory=ObjectFinder.findFactoryFromFactoryId(factoryBoss.getResponsibleFactoryId());
        DefaultTableModel model=(DefaultTableModel) ordersTable.getModel();
        int selectedRow=ordersTable.getSelectedRow();
        if(selectedRow==-1){
            if(model.getRowCount()==0){
                messageOrders.setText("You don't have any order to approve");        
            }else{
                messageOrders.setText("No order selected.Please select an order to approve");
            }
        }else{
            if(ordersTable.getValueAt(selectedRow,3).equals(RequestStatus.Waiting)){
                Request request=ObjectFinder.findRequestFromRequestId(factoryBoss,(int)ordersTable.getValueAt(selectedRow, 0));
                if(responsibleFactory instanceof WoodenTableFactory){
                    String message=FactoryBossOperations.approveWoodTableRequest(factoryBoss, request);
                    messageOrders.setText(message);
                }else if(responsibleFactory instanceof WoodenBookshelfFactory){
                    String message=FactoryBossOperations.approveWoodBookshelfRequest(factoryBoss, request);
                    messageOrders.setText(message); 
                }else{
                    String message=FactoryBossOperations.approveWoodWardrobeRequest(factoryBoss, request);
                    messageOrders.setText(message); 
                    
                }
            
            }else{
                messageOrders.setText("You already completed approve or deny operation on this order");
            }
            
        }
        fillMoneyAndWoodStock();
        removeRows();
        fillOrdersTable();
        
    }//GEN-LAST:event_approveOrderButtonActionPerformed

    private void denyOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyOrderButtonActionPerformed
        DefaultTableModel model=(DefaultTableModel) ordersTable.getModel();
        int selectedRow=ordersTable.getSelectedRow();
        if(selectedRow==-1){
            if(model.getRowCount()==0){
                messageOrders.setText("You don't have any order to deny");        
            }else{
                messageOrders.setText("No order selected.Please select an order to deny");
            }
        }else{
            if(ordersTable.getValueAt(selectedRow,3).equals(RequestStatus.Waiting)){
                Request request=ObjectFinder.findRequestFromRequestId(factoryBoss,(int)ordersTable.getValueAt(selectedRow, 0));
            String message=FactoryBossOperations.denyRequest(factoryBoss, request);
            messageOrders.setText(message);
            }else{
                messageOrders.setText("You already completed approve or deny operation on this order");
            }
            
        }
        fillMoneyAndWoodStock();
        removeRows();
        fillOrdersTable();
    }//GEN-LAST:event_denyOrderButtonActionPerformed

    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked
       messageOrders.setText("");
    }//GEN-LAST:event_ordersTableMouseClicked
 
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton denyOrderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageOrders;
    private javax.swing.JLabel moneyLabel;
    private javax.swing.JTable ordersTable;
    private javax.swing.JLabel woodStockLabel;
    // End of variables declaration//GEN-END:variables
}
